use regex::Regex;
use std::error::Error;

/// Rotate a matrix. N.B. can only rotate square matrices
fn rotate_board(mut board: &Vec<Vec<i32>>) -> Vec<Vec<i32>> {
    let mut copy = board.clone();

    for i in 0..board.len() {
        for x in 0..board[i].len() {
            copy[i][x] = board[x][i]
        }
    }

    copy
}

/// Given the str line with numbers and whitespaces, clean it up and create the board matrix
fn create_board(lines: Vec<&str>) -> Vec<Vec<i32>> {
    let mut board = vec![];

    for line in lines {
        board.push(
            Regex::new(r"\W+")
                .unwrap()
                .split(line)
                .map(|x| x.to_string())
                .filter(|x| !x.is_empty())
                .map(|x| x.parse::<i32>().unwrap())
                .collect(),
        );
    }

    board
}

fn has_winning_board(scores: &Vec<Vec<Vec<i32>>>) -> i32 {
    for i in 0..scores.len() {
        for x in 0..scores[i].len() {
            if scores[i][x].iter().sum::<i32>() == 5 {
                // winning board number
                return i as i32;
            }
        }
    }

    -1
}

pub fn run(input: &str) -> (i32, i32) {
    let lines: Vec<&str> = input.split("\n").collect();
    let draws: Vec<i32> = lines[0]
        .split(",")
        .map(|x| x.parse::<i32>().unwrap())
        .collect();
    let mut boards: Vec<Vec<Vec<i32>>> = vec![];

    let mut start = 2;
    let mut end = 6;
    let mut tmp_board = vec![];

    // build boards
    for i in start..lines.len() {
        if lines[i].is_empty() {
            continue;
        }

        if start < end {
            tmp_board.push(lines[i]);
        }

        if i == end {
            // last board line
            boards.push(create_board(tmp_board.clone()));
            start = end + 1;
            end = end + 6;
            tmp_board.clear()
        }
    }

    // build scores
    let mut scores: Vec<Vec<Vec<i32>>> = boards.clone(); // Create a mask with all 0s from the boards
    for i in 0..scores.len() {
        for x in 0..scores[i].len() {
            for z in 0..scores[i][x].len() {
                scores[i][x][z] = 0
            }
        }
    }

    let mut winning_board = -1;
    // start drawing numbers
    for draw in draws {
        for i in 0..boards.len() {
            for x in 0..boards[i].len() {
                for z in 0..boards[i][x].len() {
                    if boards[i][x][z] == draw {
                        scores[i][x][z] = 1;
                        let winning_board_id = has_winning_board(&scores);
                        if winning_board_id > -1 {
                            winning_board = winning_board_id;
                            break;
                        }
                    }
                }
            }
        }
    }

    println!("{:?}", winning_board);

    (0, 0)
}

#[cfg(test)]
mod day_01_tests {
    use super::*;

    #[test]
    fn run_tests() {
        let input = "7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1

22 13 17 11  0
 8  2 23  4 24
21  9 14 16  7
 6 10  3 18  5
 1 12 20 15 19

 3 15  0  2 22
 9 18 13 17  5
19  8  7 25 23
20 11 10 24  4
14 21 16 12  6

14 21 17 24  4
10 16 15  9 19
18  8 23 26 20
22 11 13  6  5
 2  0 12  3  7";
        assert_eq!(188 * 24, run(input).0);
    }

    mod rotate_board_tests {
        use super::super::*;

        // #[test]
        // /// 2x3 matrix. Still to implement
        // fn rotate_board_rectangular_matrix_should_rotate() {
        //     let mut expected = vec![];
        //     expected.push(vec![1, 0]);
        //     expected.push(vec![2, 1]);
        //     expected.push(vec![-3, 4]);
        //     let mut input = vec![];
        //     input.push(vec![1, 2, -3]);
        //     input.push(vec![0, 1, 4]);
        //
        //     assert_eq!(expected, rotate_board(input))
        // }

        #[test]
        /// 3x3 matrix
        fn rotate_board__square_matrix__should_rotate() {
            let mut expected = vec![];
            expected.push(vec![1, 2, -3]);
            expected.push(vec![0, 1, 2]);
            expected.push(vec![3, -1, 4]);
            let mut input = vec![];
            input.push(vec![1, 0, 3]);
            input.push(vec![2, 1, -1]);
            input.push(vec![-3, 2, 4]);

            assert_eq!(expected, rotate_board(&input))
        }
    }
}
